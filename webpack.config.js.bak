// Requires
const path = require('path');

// Plugins
const {
  DefinePlugin,
  ProvidePlugin,
  ContextReplacementPlugin,
} = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const WebpackMonitor = require('webpack-monitor');
const {
  TsConfigPathsPlugin,
  CheckerPlugin,
} = require('awesome-typescript-loader');

// Paths
const pathPackage = path.resolve(__dirname, './package.json');

/********************************************************************************
 *  Configuration Settings
 ********************************************************************************/

let settings = {};

// Application global definitions
settings.globalDefinitions = (env) => {
  return {
    BUILD_DATE: Date.now(),
  };
};

// Application Title
settings.title = 'bug-karma-webpack-workers';

// Webpack resolver extensions
settings.extensions = ['.js', '.ts'];

// Paths
settings.paths = {
  base: (process.env.CDN_URL) ? process.env.CDN_URL : '/',
  outputDirectory: path.resolve(__dirname, './dist'),
  inputDirectories: [path.resolve(__dirname, './src')],
  excludeDirectories: [path.resolve(__dirname, './node_modules')],
};

// TS Loader Config
settings.tsloader = {
  configFileName: path.join(__dirname, './tsconfig.json'),
  compiler: 'typescript',
};

/********************************************************************************
 *  Configuration Function
 ********************************************************************************/

/**
 *  The webpack configuration function
 *
 *  @param  {Object} [webpackEnvironment] The environment variables set
 *
 *  @return {Object} The webpack configuration object
 */
function configure(webpackEnvironment = {}) {
  /********************************************************************************
   *  Webpack Configuration
   ********************************************************************************/

  let webpackConfiguration = {};

  /**
   *  Application entry
   ********************************************************************************/

  webpackConfiguration.entry = './src/index.ts';

  /**
   *  Webpack Output
   ********************************************************************************/

  const outputName = '[name].[hash]';
  webpackConfiguration.output = {
    path: settings.paths.outputDirectory,
    publicPath: settings.paths.base,
    filename: `${outputName}.bundle.js`,
    sourceMapFilename: `${outputName}.bundle.map`,
    chunkFilename: `${outputName}.chunk.js`,
    crossOriginLoading: 'anonymous',
  };

  /**
   *  Webpack Resolver
   ********************************************************************************/

  webpackConfiguration.resolve = {
    extensions: settings.extensions,
    modules: ['node_modules', ...settings.paths.inputDirectories],
    alias: settings.paths.aliases,
  };

  /**
   *  Development?
   ********************************************************************************/

  webpackConfiguration.devtool = 'cheap-module-eval-source-map';
  webpackConfiguration.devServer = {
    contentBase: settings.paths.outputDirectory,
    historyApiFallback: true,
  };

  /********************************************************************************
   *  Module Rules
   ********************************************************************************/

  let rules = [];

  /**
   *  Javascript/Typescript
   ********************************************************************************/

  rules.push({
    test: /\.(js|ts)$/i,
    loader: 'awesome-typescript-loader',
    exclude: settings.paths.excludeDirectories,
    options: settings.tsloader,
  });

  /**
   *  Images/Files
   ********************************************************************************/

  // Size limits
  const urlSizeLimit = 8192; // 8mb

  // Embed small data as data urls and larger ones as files
  rules.push({
    test: /\.(png|gif|jpg|cur)$/i,
    loader: 'url-loader',
    options: { limit: urlSizeLimit },
  });
  rules.push({
    test: /\.woff2(\?v=\d\.\d\.\d)?$/i,
    loader: 'url-loader',
    options: {
      limit: urlSizeLimit,
      mimetype: 'application/font-woff2',
    },
  });
  rules.push({
    test: /\.woff(\?v=\d\.\d\.\d)?$/i,
    loader: 'url-loader',
    options: {
      limit: urlSizeLimit,
      mimetype: 'application/font-woff',
    },
  });

  // Load fonts normally
  rules.push({
    test: /\.(ttf|eot|svg|otf)(\?v=\d\.\d\.\d)?$/i,
    loader: 'file-loader',
  });

  // Add rules
  webpackConfiguration.module = { rules };

  /********************************************************************************
   *  Plugins
   ********************************************************************************/

  let plugins = [];

  /**
   *  Global Definitions
   ********************************************************************************/

  plugins.push(new DefinePlugin(settings.globalDefinitions(webpackEnvironment)));

  /**
   *  Typescript loader plugins
   ********************************************************************************/

  plugins.push(new TsConfigPathsPlugin(settings.tsloader));
  plugins.push(new CheckerPlugin());

  // Add plugins
  webpackConfiguration.plugins = plugins;

  // Return our configuration
  return webpackConfiguration;
}

// Export our configuration function
module.exports = configure;
